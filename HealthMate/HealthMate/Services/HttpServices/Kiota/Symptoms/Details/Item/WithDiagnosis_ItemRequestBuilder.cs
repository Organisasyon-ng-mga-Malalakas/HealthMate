// <auto-generated/>
using HealthMate.Services.HttpServices.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace HealthMate.Services.HttpServices.Symptoms.Details.Item {
    /// <summary>
    /// Builds and executes requests for operations under \symptoms\details\{diagnosis_id}
    /// </summary>
    public class WithDiagnosis_ItemRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new WithDiagnosis_ItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithDiagnosis_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/symptoms/details/{diagnosis_id}{?birth_year*,gender*,body_part*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithDiagnosis_ItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithDiagnosis_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/symptoms/details/{diagnosis_id}{?birth_year*,gender*,body_part*}", rawUrl) {
        }
        /// <summary>
        /// Get Condition Details
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<WithDiagnosis_ItemRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<WithDiagnosis_ItemRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"422", HTTPValidationError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Condition Details
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<WithDiagnosis_ItemRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<WithDiagnosis_ItemRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new WithDiagnosis_ItemRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithDiagnosis_ItemRequestBuilder WithUrl(string rawUrl) {
            return new WithDiagnosis_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get Condition Details
        /// </summary>
        public class WithDiagnosis_ItemRequestBuilderGetQueryParameters {
            [QueryParameter("birth_year")]
            public int? BirthYear { get; set; }
            [Obsolete("This property is deprecated, use body_partAsBodyPart instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("body_part")]
            public string? BodyPart { get; set; }
#nullable restore
#else
            [QueryParameter("body_part")]
            public string BodyPart { get; set; }
#endif
            [QueryParameter("body_part")]
            public HealthMate.Services.HttpServices.Symptoms.BodyPart? BodyPartAsBodyPart { get; set; }
            [Obsolete("This property is deprecated, use genderAsGender instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("gender")]
            public string? Gender { get; set; }
#nullable restore
#else
            [QueryParameter("gender")]
            public string Gender { get; set; }
#endif
            [QueryParameter("gender")]
            public HealthMate.Services.HttpServices.Symptoms.Gender? GenderAsGender { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithDiagnosis_ItemRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public WithDiagnosis_ItemRequestBuilderGetQueryParameters QueryParameters { get; set; } = new WithDiagnosis_ItemRequestBuilderGetQueryParameters();
            /// <summary>
            /// Instantiates a new WithDiagnosis_ItemRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public WithDiagnosis_ItemRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
